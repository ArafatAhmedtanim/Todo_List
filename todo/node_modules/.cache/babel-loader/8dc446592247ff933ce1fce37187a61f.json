{"ast":null,"code":"import _objectSpread from \"/home/arafat/FrontEndDevelop/learning/todo/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { call, put } from 'redux-saga/effects';\nimport api from '../../../../services/api';\nimport { loadSuccess, loadFailure, createSuccess, createFailure, removeSuccess, removeFailure, updateSuccess, updateFailure } from './actions';\nexport function* load() {\n  try {\n    const response = yield call(api.get, `/todos/`);\n    yield put(loadSuccess(response.data));\n  } catch (err) {\n    yield put(loadFailure());\n  }\n}\nexport function* create(action) {\n  try {\n    const response = yield call(api.post, `/todos/`, {\n      des: action.payload.todoDes\n    });\n    yield put(createSuccess(response.data));\n  } catch (err) {\n    yield put(createFailure());\n  }\n}\nexport function* remove(action) {\n  try {\n    const response = yield call(api.delete, `/todos/${action.payload.todoId}`);\n    yield put(removeSuccess(action.payload.todoId));\n  } catch (err) {\n    yield put(removeFailure());\n  }\n}\nexport function* update(action) {\n  try {\n    const response = yield call(api.put, `/todos/${action.payload.todo.id}`, _objectSpread({}, action.payload.todo, {\n      status: !action.payload.todo.status\n    }));\n    yield put(updateSuccess(response.data));\n  } catch (err) {\n    yield put(updateFailure());\n  }\n}","map":{"version":3,"sources":["/home/arafat/FrontEndDevelop/learning/todo/src/Todos/store/ducks/todos/sagas.ts"],"names":["call","put","api","loadSuccess","loadFailure","createSuccess","createFailure","removeSuccess","removeFailure","updateSuccess","updateFailure","load","response","get","data","err","create","action","post","des","payload","todoDes","remove","delete","todoId","update","todo","id","status"],"mappings":";AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,OAAOC,GAAP,MAAgB,0BAAhB;AAEA,SACIC,WADJ,EAEIC,WAFJ,EAGIC,aAHJ,EAIIC,aAJJ,EAKIC,aALJ,EAMIC,aANJ,EAOIC,aAPJ,EAQIC,aARJ,QASO,WATP;AAWA,OAAO,UAAUC,IAAV,GAAiB;AACpB,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACE,GAAG,CAACW,GAAL,EAAW,SAAX,CAA3B;AACA,UAAMZ,GAAG,CAACE,WAAW,CAACS,QAAQ,CAACE,IAAV,CAAZ,CAAT;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACV,UAAMd,GAAG,CAACG,WAAW,EAAZ,CAAT;AACH;AACJ;AAED,OAAO,UAAUY,MAAV,CAAiBC,MAAjB,EAA8B;AACjC,MAAI;AACA,UAAML,QAAQ,GAAG,MAAMZ,IAAI,CACvBE,GAAG,CAACgB,IADmB,EACZ,SADY,EACF;AAAEC,MAAAA,GAAG,EAAEF,MAAM,CAACG,OAAP,CAAeC;AAAtB,KADE,CAA3B;AAGA,UAAMpB,GAAG,CAACI,aAAa,CAACO,QAAQ,CAACE,IAAV,CAAd,CAAT;AACH,GALD,CAKE,OAAOC,GAAP,EAAY;AACV,UAAMd,GAAG,CAACK,aAAa,EAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUgB,MAAV,CAAiBL,MAAjB,EAA8B;AACjC,MAAI;AACA,UAAML,QAAQ,GAAG,MAAMZ,IAAI,CACvBE,GAAG,CAACqB,MADmB,EACV,UAASN,MAAM,CAACG,OAAP,CAAeI,MAAO,EADrB,CAA3B;AAGA,UAAMvB,GAAG,CAACM,aAAa,CAACU,MAAM,CAACG,OAAP,CAAeI,MAAhB,CAAd,CAAT;AACH,GALD,CAKE,OAAOT,GAAP,EAAY;AACV,UAAMd,GAAG,CAACO,aAAa,EAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUiB,MAAV,CAAiBR,MAAjB,EAA8B;AACjC,MAAI;AACA,UAAML,QAAQ,GAAG,MAAMZ,IAAI,CACvBE,GAAG,CAACD,GADmB,EACb,UAASgB,MAAM,CAACG,OAAP,CAAeM,IAAf,CAAoBC,EAAG,EADnB,oBAC2BV,MAAM,CAACG,OAAP,CAAeM,IAD1C;AACgDE,MAAAA,MAAM,EAAE,CAACX,MAAM,CAACG,OAAP,CAAeM,IAAf,CAAoBE;AAD7E,OAA3B;AAGA,UAAM3B,GAAG,CAACQ,aAAa,CAACG,QAAQ,CAACE,IAAV,CAAd,CAAT;AACH,GALD,CAKE,OAAOC,GAAP,EAAY;AACV,UAAMd,GAAG,CAACS,aAAa,EAAd,CAAT;AACH;AACJ","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport api from '../../../../services/api';\n\nimport {\n    loadSuccess,\n    loadFailure,\n    createSuccess,\n    createFailure,\n    removeSuccess,\n    removeFailure,\n    updateSuccess,\n    updateFailure\n} from './actions';\n\nexport function* load() {\n    try {\n        const response = yield call(api.get, `/todos/`);\n        yield put(loadSuccess(response.data));\n    } catch (err) {\n        yield put(loadFailure());\n    }\n}\n\nexport function* create(action: any) {\n    try {\n        const response = yield call(\n            api.post, `/todos/`, { des: action.payload.todoDes }\n        );\n        yield put(createSuccess(response.data))\n    } catch (err) {\n        yield put(createFailure())\n    }\n}\n\nexport function* remove(action: any) {\n    try {\n        const response = yield call(\n            api.delete, `/todos/${action.payload.todoId}`\n        );\n        yield put(removeSuccess(action.payload.todoId))\n    } catch (err) {\n        yield put(removeFailure())\n    }\n}\n\nexport function* update(action: any) {\n    try {\n        const response = yield call(\n            api.put, `/todos/${action.payload.todo.id}`, { ...action.payload.todo, status: !action.payload.todo.status }\n        );\n        yield put(updateSuccess(response.data))\n    } catch (err) {\n        yield put(updateFailure())\n    }\n}"]},"metadata":{},"sourceType":"module"}