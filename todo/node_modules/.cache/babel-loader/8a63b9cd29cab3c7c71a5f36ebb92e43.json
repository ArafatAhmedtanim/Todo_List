{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.routerActions = exports.goForward = exports.goBack = exports.go = exports.replace = exports.push = exports.CALL_HISTORY_METHOD = exports.onLocationChanged = exports.LOCATION_CHANGE = void 0;\n/**\n * This action type will be dispatched when your history\n * receives a location change.\n */\n\nvar LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\nexports.LOCATION_CHANGE = LOCATION_CHANGE;\n\nvar onLocationChanged = function onLocationChanged(location, action) {\n  var isFirstRendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    type: LOCATION_CHANGE,\n    payload: {\n      location: location,\n      action: action,\n      isFirstRendering: isFirstRendering\n    }\n  };\n};\n/**\n * This action type will be dispatched by the history actions below.\n * If you're writing a middleware to watch for navigation events, be sure to\n * look for actions of this type.\n */\n\n\nexports.onLocationChanged = onLocationChanged;\nvar CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\nexports.CALL_HISTORY_METHOD = CALL_HISTORY_METHOD;\n\nvar updateLocation = function updateLocation(method) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return {\n      type: CALL_HISTORY_METHOD,\n      payload: {\n        method: method,\n        args: args\n      }\n    };\n  };\n};\n/**\n * These actions correspond to the history API.\n * The associated routerMiddleware will capture these events before they get to\n * your reducer and reissue them as the matching function on your history.\n */\n\n\nvar push = updateLocation('push');\nexports.push = push;\nvar replace = updateLocation('replace');\nexports.replace = replace;\nvar go = updateLocation('go');\nexports.go = go;\nvar goBack = updateLocation('goBack');\nexports.goBack = goBack;\nvar goForward = updateLocation('goForward');\nexports.goForward = goForward;\nvar routerActions = {\n  push: push,\n  replace: replace,\n  go: go,\n  goBack: goBack,\n  goForward: goForward\n};\nexports.routerActions = routerActions;","map":{"version":3,"sources":["/home/arafat/FrontEndDevelop/learning/todo/node_modules/connected-react-router/lib/actions.js"],"names":["Object","defineProperty","exports","value","routerActions","goForward","goBack","go","replace","push","CALL_HISTORY_METHOD","onLocationChanged","LOCATION_CHANGE","location","action","isFirstRendering","arguments","length","undefined","type","payload","updateLocation","method","_len","args","Array","_key"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACI,MAAR,GAAiBJ,OAAO,CAACK,EAAR,GAAaL,OAAO,CAACM,OAAR,GAAkBN,OAAO,CAACO,IAAR,GAAeP,OAAO,CAACQ,mBAAR,GAA8BR,OAAO,CAACS,iBAAR,GAA4BT,OAAO,CAACU,eAAR,GAA0B,KAAK,CAApM;AAEA;;;;;AAIA,IAAIA,eAAe,GAAG,0BAAtB;AACAV,OAAO,CAACU,eAAR,GAA0BA,eAA1B;;AAEA,IAAID,iBAAiB,GAAG,SAASA,iBAAT,CAA2BE,QAA3B,EAAqCC,MAArC,EAA6C;AACnE,MAAIC,gBAAgB,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAA3F;AACA,SAAO;AACLG,IAAAA,IAAI,EAAEP,eADD;AAELQ,IAAAA,OAAO,EAAE;AACPP,MAAAA,QAAQ,EAAEA,QADH;AAEPC,MAAAA,MAAM,EAAEA,MAFD;AAGPC,MAAAA,gBAAgB,EAAEA;AAHX;AAFJ,GAAP;AAQD,CAVD;AAWA;;;;;;;AAOAb,OAAO,CAACS,iBAAR,GAA4BA,iBAA5B;AACA,IAAID,mBAAmB,GAAG,8BAA1B;AACAR,OAAO,CAACQ,mBAAR,GAA8BA,mBAA9B;;AAEA,IAAIW,cAAc,GAAG,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AACnD,SAAO,YAAY;AACjB,SAAK,IAAIC,IAAI,GAAGP,SAAS,CAACC,MAArB,EAA6BO,IAAI,GAAG,IAAIC,KAAJ,CAAUF,IAAV,CAApC,EAAqDG,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGH,IAA3E,EAAiFG,IAAI,EAArF,EAAyF;AACvFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaV,SAAS,CAACU,IAAD,CAAtB;AACD;;AAED,WAAO;AACLP,MAAAA,IAAI,EAAET,mBADD;AAELU,MAAAA,OAAO,EAAE;AACPE,QAAAA,MAAM,EAAEA,MADD;AAEPE,QAAAA,IAAI,EAAEA;AAFC;AAFJ,KAAP;AAOD,GAZD;AAaD,CAdD;AAeA;;;;;;;AAOA,IAAIf,IAAI,GAAGY,cAAc,CAAC,MAAD,CAAzB;AACAnB,OAAO,CAACO,IAAR,GAAeA,IAAf;AACA,IAAID,OAAO,GAAGa,cAAc,CAAC,SAAD,CAA5B;AACAnB,OAAO,CAACM,OAAR,GAAkBA,OAAlB;AACA,IAAID,EAAE,GAAGc,cAAc,CAAC,IAAD,CAAvB;AACAnB,OAAO,CAACK,EAAR,GAAaA,EAAb;AACA,IAAID,MAAM,GAAGe,cAAc,CAAC,QAAD,CAA3B;AACAnB,OAAO,CAACI,MAAR,GAAiBA,MAAjB;AACA,IAAID,SAAS,GAAGgB,cAAc,CAAC,WAAD,CAA9B;AACAnB,OAAO,CAACG,SAAR,GAAoBA,SAApB;AACA,IAAID,aAAa,GAAG;AAClBK,EAAAA,IAAI,EAAEA,IADY;AAElBD,EAAAA,OAAO,EAAEA,OAFS;AAGlBD,EAAAA,EAAE,EAAEA,EAHc;AAIlBD,EAAAA,MAAM,EAAEA,MAJU;AAKlBD,EAAAA,SAAS,EAAEA;AALO,CAApB;AAOAH,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.routerActions = exports.goForward = exports.goBack = exports.go = exports.replace = exports.push = exports.CALL_HISTORY_METHOD = exports.onLocationChanged = exports.LOCATION_CHANGE = void 0;\n\n/**\n * This action type will be dispatched when your history\n * receives a location change.\n */\nvar LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\nexports.LOCATION_CHANGE = LOCATION_CHANGE;\n\nvar onLocationChanged = function onLocationChanged(location, action) {\n  var isFirstRendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    type: LOCATION_CHANGE,\n    payload: {\n      location: location,\n      action: action,\n      isFirstRendering: isFirstRendering\n    }\n  };\n};\n/**\n * This action type will be dispatched by the history actions below.\n * If you're writing a middleware to watch for navigation events, be sure to\n * look for actions of this type.\n */\n\n\nexports.onLocationChanged = onLocationChanged;\nvar CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\nexports.CALL_HISTORY_METHOD = CALL_HISTORY_METHOD;\n\nvar updateLocation = function updateLocation(method) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return {\n      type: CALL_HISTORY_METHOD,\n      payload: {\n        method: method,\n        args: args\n      }\n    };\n  };\n};\n/**\n * These actions correspond to the history API.\n * The associated routerMiddleware will capture these events before they get to\n * your reducer and reissue them as the matching function on your history.\n */\n\n\nvar push = updateLocation('push');\nexports.push = push;\nvar replace = updateLocation('replace');\nexports.replace = replace;\nvar go = updateLocation('go');\nexports.go = go;\nvar goBack = updateLocation('goBack');\nexports.goBack = goBack;\nvar goForward = updateLocation('goForward');\nexports.goForward = goForward;\nvar routerActions = {\n  push: push,\n  replace: replace,\n  go: go,\n  goBack: goBack,\n  goForward: goForward\n};\nexports.routerActions = routerActions;"]},"metadata":{},"sourceType":"script"}